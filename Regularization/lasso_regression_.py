# -*- coding: utf-8 -*-
"""Lasso Regression .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JBMiCJDPa3-z_z4BZu20Q6kL2rfVbEbX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import make_regression
from sklearn.linear_model import Lasso
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score

# 🧪 Generate synthetic dataset
X, y = make_regression(n_samples=200, n_features=10, noise=20, random_state=42)

# Split into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 📏 Feature Scaling (important for Lasso)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ⚙️ Train Lasso Regression Model
lasso = Lasso(alpha=0.1)  # Try alpha = 0.01, 0.1, 1.0 etc.
lasso.fit(X_train_scaled, y_train)

# 📈 Predict on Test Set
y_pred = lasso.predict(X_test_scaled)

# 🧮 Evaluation Metrics
print("🔍 Lasso Regression Results:")
print(f"R² Score: {r2_score(y_test, y_pred):.4f}")
print(f"MSE: {mean_squared_error(y_test, y_pred):.2f}")
print(f"Coefficients: {lasso.coef_}")
print(f"Number of features selected (non-zero): {np.sum(lasso.coef_ != 0)}")

# 📊 Plot Predictions vs Actual
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred, c='blue', edgecolors='k')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Lasso Regression: Actual vs Predicted")
plt.grid(True)
plt.show()

